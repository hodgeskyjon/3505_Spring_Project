// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetTests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AddToSpreadsheet - Use 'AddToSpreadsheetParams' to pass parameters into this method.
        /// </summary>
        public void AddToSpreadsheet()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIEditCellEdit = this.UISpreadsheetWindow.UIEditCellWindow.UIEditCellEdit;
            WinButton uIEvaluateButton = this.UISpreadsheetWindow.UIEvaluateWindow.UIEvaluateButton;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(51, 100));

            // Type '23' in 'editCell' text box
            uIEditCellEdit.Text = this.AddToSpreadsheetParams.UIEditCellEditText;

            // Type '{Enter}' in 'editCell' text box
            Keyboard.SendKeys(uIEditCellEdit, this.AddToSpreadsheetParams.UIEditCellEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(59, 82));

            // Type '7' in 'editCell' text box
            uIEditCellEdit.Text = this.AddToSpreadsheetParams.UIEditCellEditText1;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(50, 12));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(212, 63));

            // Type '=' in 'Evaluate' button
            Keyboard.SendKeys(uIEvaluateButton, this.AddToSpreadsheetParams.UIEvaluateButtonSendKeys, ModifierKeys.None);

            // Type '=a2-a3' in 'editCell' text box
            uIEditCellEdit.Text = this.AddToSpreadsheetParams.UIEditCellEditText2;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(63, 7));
        }
        
        /// <summary>
        /// checkTextboxes - Use 'checkTextboxesExpectedValues' to pass parameters into this method.
        /// </summary>
        public void checkTextboxes()
        {
            #region Variable Declarations
            WinEdit uISelectedCellEdit = this.UISpreadsheetWindow.UIA1Window.UISelectedCellEdit;
            WinEdit uISelectedValueEdit = this.UISpreadsheetWindow.UISelectedValueWindow.UISelectedValueEdit;
            WinEdit uIEditCellEdit = this.UISpreadsheetWindow.UIEditCellWindow.UIEditCellEdit;
            #endregion

            // Verify that the 'Text' property of 'selectedCell' text box equals 'C2'
            Assert.AreEqual(this.checkTextboxesExpectedValues.UISelectedCellEditText, uISelectedCellEdit.Text);

            // Verify that the 'Text' property of 'selectedValue' text box equals '-1'
            Assert.AreEqual(this.checkTextboxesExpectedValues.UISelectedValueEditText, uISelectedValueEdit.Text);

            // Verify that the 'Text' property of 'editCell' text box equals '=A2-A3'
            Assert.AreEqual(this.checkTextboxesExpectedValues.UIEditCellEditText, uIEditCellEdit.Text);
        }
        
        /// <summary>
        /// newFileAndExit
        /// </summary>
        public void newFileAndExit()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uIExitMenuItem = this.UISpreadsheetWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UIExitMenuItem;
            #endregion

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(18, 17));

            // Click 'File' -> 'Exit' menu item
            Mouse.Click(uIExitMenuItem, new Point(42, 15));
        }
        
        /// <summary>
        /// FileName - Use 'FileNameExpectedValues' to pass parameters into this method.
        /// </summary>
        public void FileName()
        {
            #region Variable Declarations
            WinMenuItem uIFileMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem;
            #endregion

            // Verify that the 'DisplayText' property of 'File' menu item equals 'File'
            Assert.AreEqual(this.FileNameExpectedValues.UIFileMenuItemDisplayText, uIFileMenuItem.DisplayText);
        }
        
        /// <summary>
        /// HelpMenu
        /// </summary>
        public void HelpMenu()
        {
            #region Variable Declarations
            WinMenuItem uIGetHelpMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIGetHelpMenuItem;
            WinButton uIOKButton = this.UIHelpWindow.UIOKWindow.UIOKButton;
            WinMenuItem uIAboutMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIAboutMenuItem;
            WinButton uIOKButton1 = this.UIAboutWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click 'Help' -> 'Get Help' menu item
            Mouse.Click(uIGetHelpMenuItem, new Point(37, 8));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(30, 20));

            // Click 'Help' -> 'About...' menu item
            Mouse.Click(uIAboutMenuItem, new Point(50, 18));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(34, 21));
        }
        
        /// <summary>
        /// SaveTested - Use 'SaveTestedParams' to pass parameters into this method.
        /// </summary>
        public void SaveTested()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinButton uICancelButton = this.UIOpenWindow.UICancelWindow.UICancelButton;
            WinMenuItem uISaveMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinTreeItem uIDownloadsTreeItem = this.UISaveAsWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIDownloadsTreeItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(49, 19));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(42, 17));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(20, 5));

            // Click 'Favorites' -> 'Downloads' tree item
            Mouse.Click(uIDownloadsTreeItem, new Point(32, 11));

            // Select 'test spreadsheet' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveTestedParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(68, 21));
        }
        
        /// <summary>
        /// testOpen
        /// </summary>
        public void testOpen()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UITestspreadsheetssListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            WinButton uICloseButton = this.UICUsersChristyDownloaWindow.UICUsersChristyDownloaTitleBar.UICloseButton;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(37, 10));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(53, 12));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(38, 21));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(35, 11));
        }
        
        /// <summary>
        /// closeApp
        /// </summary>
        public void closeApp()
        {
            #region Variable Declarations
            WinMenuItem uIExitMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIExitMenuItem;
            #endregion

            // Click 'File' -> 'Exit' menu item
            Mouse.Click(uIExitMenuItem, new Point(56, 13));
        }
        
        #region Properties
        public virtual AddToSpreadsheetParams AddToSpreadsheetParams
        {
            get
            {
                if ((this.mAddToSpreadsheetParams == null))
                {
                    this.mAddToSpreadsheetParams = new AddToSpreadsheetParams();
                }
                return this.mAddToSpreadsheetParams;
            }
        }
        
        public virtual checkTextboxesExpectedValues checkTextboxesExpectedValues
        {
            get
            {
                if ((this.mcheckTextboxesExpectedValues == null))
                {
                    this.mcheckTextboxesExpectedValues = new checkTextboxesExpectedValues();
                }
                return this.mcheckTextboxesExpectedValues;
            }
        }
        
        public virtual FileNameExpectedValues FileNameExpectedValues
        {
            get
            {
                if ((this.mFileNameExpectedValues == null))
                {
                    this.mFileNameExpectedValues = new FileNameExpectedValues();
                }
                return this.mFileNameExpectedValues;
            }
        }
        
        public virtual SaveTestedParams SaveTestedParams
        {
            get
            {
                if ((this.mSaveTestedParams == null))
                {
                    this.mSaveTestedParams = new SaveTestedParams();
                }
                return this.mSaveTestedParams;
            }
        }
        
        public UISpreadsheetWindow UISpreadsheetWindow
        {
            get
            {
                if ((this.mUISpreadsheetWindow == null))
                {
                    this.mUISpreadsheetWindow = new UISpreadsheetWindow();
                }
                return this.mUISpreadsheetWindow;
            }
        }
        
        public UISpreadsheetWindow1 UISpreadsheetWindow1
        {
            get
            {
                if ((this.mUISpreadsheetWindow1 == null))
                {
                    this.mUISpreadsheetWindow1 = new UISpreadsheetWindow1();
                }
                return this.mUISpreadsheetWindow1;
            }
        }
        
        public UIHelpWindow UIHelpWindow
        {
            get
            {
                if ((this.mUIHelpWindow == null))
                {
                    this.mUIHelpWindow = new UIHelpWindow();
                }
                return this.mUIHelpWindow;
            }
        }
        
        public UIAboutWindow UIAboutWindow
        {
            get
            {
                if ((this.mUIAboutWindow == null))
                {
                    this.mUIAboutWindow = new UIAboutWindow();
                }
                return this.mUIAboutWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UICUsersChristyDownloaWindow UICUsersChristyDownloaWindow
        {
            get
            {
                if ((this.mUICUsersChristyDownloaWindow == null))
                {
                    this.mUICUsersChristyDownloaWindow = new UICUsersChristyDownloaWindow();
                }
                return this.mUICUsersChristyDownloaWindow;
            }
        }
        #endregion
        
        #region Fields
        private AddToSpreadsheetParams mAddToSpreadsheetParams;
        
        private checkTextboxesExpectedValues mcheckTextboxesExpectedValues;
        
        private FileNameExpectedValues mFileNameExpectedValues;
        
        private SaveTestedParams mSaveTestedParams;
        
        private UISpreadsheetWindow mUISpreadsheetWindow;
        
        private UISpreadsheetWindow1 mUISpreadsheetWindow1;
        
        private UIHelpWindow mUIHelpWindow;
        
        private UIAboutWindow mUIAboutWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UICUsersChristyDownloaWindow mUICUsersChristyDownloaWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddToSpreadsheet'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AddToSpreadsheetParams
    {
        
        #region Fields
        /// <summary>
        /// Type '23' in 'editCell' text box
        /// </summary>
        public string UIEditCellEditText = "23";
        
        /// <summary>
        /// Type '{Enter}' in 'editCell' text box
        /// </summary>
        public string UIEditCellEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '7' in 'editCell' text box
        /// </summary>
        public string UIEditCellEditText1 = "7";
        
        /// <summary>
        /// Type '=' in 'Evaluate' button
        /// </summary>
        public string UIEvaluateButtonSendKeys = "=";
        
        /// <summary>
        /// Type '=a2-a3' in 'editCell' text box
        /// </summary>
        public string UIEditCellEditText2 = "=a2-a3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'checkTextboxes'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class checkTextboxesExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'selectedCell' text box equals 'C2'
        /// </summary>
        public string UISelectedCellEditText = "C2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'selectedValue' text box equals '-1'
        /// </summary>
        public string UISelectedValueEditText = "-1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'editCell' text box equals '=A2-A3'
        /// </summary>
        public string UIEditCellEditText = "=A2-A3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FileName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class FileNameExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'File' menu item equals 'File'
        /// </summary>
        public string UIFileMenuItemDisplayText = "File";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveTested'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class SaveTestedParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'test spreadsheet' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "test spreadsheet";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISpreadsheetWindow : WinWindow
    {
        
        public UISpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIEditCellWindow UIEditCellWindow
        {
            get
            {
                if ((this.mUIEditCellWindow == null))
                {
                    this.mUIEditCellWindow = new UIEditCellWindow(this);
                }
                return this.mUIEditCellWindow;
            }
        }
        
        public UIEvaluateWindow UIEvaluateWindow
        {
            get
            {
                if ((this.mUIEvaluateWindow == null))
                {
                    this.mUIEvaluateWindow = new UIEvaluateWindow(this);
                }
                return this.mUIEvaluateWindow;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UISelectedValueWindow UISelectedValueWindow
        {
            get
            {
                if ((this.mUISelectedValueWindow == null))
                {
                    this.mUISelectedValueWindow = new UISelectedValueWindow(this);
                }
                return this.mUISelectedValueWindow;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIEditCellWindow mUIEditCellWindow;
        
        private UIEvaluateWindow mUIEvaluateWindow;
        
        private UIA1Window mUIA1Window;
        
        private UISelectedValueWindow mUISelectedValueWindow;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIEditCellWindow : WinWindow
    {
        
        public UIEditCellWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "editCell";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIEditCellEdit
        {
            get
            {
                if ((this.mUIEditCellEdit == null))
                {
                    this.mUIEditCellEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIEditCellEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Edit Cell Contents:";
                    this.mUIEditCellEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIEditCellEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIEditCellEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIEvaluateWindow : WinWindow
    {
        
        public UIEvaluateWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "EvaluateButton";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UIEvaluateButton
        {
            get
            {
                if ((this.mUIEvaluateButton == null))
                {
                    this.mUIEvaluateButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIEvaluateButton.SearchProperties[WinButton.PropertyNames.Name] = "Evaluate";
                    this.mUIEvaluateButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIEvaluateButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIEvaluateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "selectedCell";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UISelectedCellEdit
        {
            get
            {
                if ((this.mUISelectedCellEdit == null))
                {
                    this.mUISelectedCellEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUISelectedCellEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Selected Cell:";
                    this.mUISelectedCellEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISelectedCellEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUISelectedCellEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISelectedValueWindow : WinWindow
    {
        
        public UISelectedValueWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "selectedValue";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UISelectedValueEdit
        {
            get
            {
                if ((this.mUISelectedValueEdit == null))
                {
                    this.mUISelectedValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUISelectedValueEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Cell Value:";
                    this.mUISelectedValueEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISelectedValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUISelectedValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        
        private UIHelpMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UIExitMenuItem
        {
            get
            {
                if ((this.mUIExitMenuItem == null))
                {
                    this.mUIExitMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIExitMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Exit";
                    this.mUIExitMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIExitMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIExitMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUIExitMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIHelpMenuItem : WinMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIGetHelpMenuItem
        {
            get
            {
                if ((this.mUIGetHelpMenuItem == null))
                {
                    this.mUIGetHelpMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIGetHelpMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Get Help";
                    this.mUIGetHelpMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIGetHelpMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIGetHelpMenuItem;
            }
        }
        
        public WinMenuItem UIAboutMenuItem
        {
            get
            {
                if ((this.mUIAboutMenuItem == null))
                {
                    this.mUIAboutMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIAboutMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "About...";
                    this.mUIAboutMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIAboutMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIAboutMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIGetHelpMenuItem;
        
        private WinMenuItem mUIAboutMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISpreadsheetWindow1 : WinWindow
    {
        
        public UISpreadsheetWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar1 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar1(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar1 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMenuStrip1MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIExitMenuItem
        {
            get
            {
                if ((this.mUIExitMenuItem == null))
                {
                    this.mUIExitMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIExitMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Exit";
                    this.mUIExitMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIExitMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIExitMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIExitMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIHelpWindow : WinWindow
    {
        
        public UIHelpWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Help";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Help");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Help");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Help");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIAboutWindow : WinWindow
    {
        
        public UIAboutWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "About";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("About");
            #endregion
        }
        
        #region Properties
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow1 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("About");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("About");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UICancelWindow mUICancelWindow;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITestspreadsheetssListItem UITestspreadsheetssListItem
        {
            get
            {
                if ((this.mUITestspreadsheetssListItem == null))
                {
                    this.mUITestspreadsheetssListItem = new UITestspreadsheetssListItem(this);
                }
                return this.mUITestspreadsheetssListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITestspreadsheetssListItem mUITestspreadsheetssListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITestspreadsheetssListItem : WinListItem
    {
        
        public UITestspreadsheetssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "test spreadsheet.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITreeViewTree : WinTree
    {
        
        public UITreeViewTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Namespace Tree Control";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIFavoritesTreeItem UIFavoritesTreeItem
        {
            get
            {
                if ((this.mUIFavoritesTreeItem == null))
                {
                    this.mUIFavoritesTreeItem = new UIFavoritesTreeItem(this);
                }
                return this.mUIFavoritesTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFavoritesTreeItem mUIFavoritesTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIFavoritesTreeItem : WinTreeItem
    {
        
        public UIFavoritesTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Favorites";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIDownloadsTreeItem
        {
            get
            {
                if ((this.mUIDownloadsTreeItem == null))
                {
                    this.mUIDownloadsTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIDownloadsTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Downloads";
                    this.mUIDownloadsTreeItem.SearchProperties["Value"] = "1";
                    this.mUIDownloadsTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDownloadsTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDownloadsTreeItem.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIDownloadsTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIDownloadsTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICUsersChristyDownloaWindow : WinWindow
    {
        
        public UICUsersChristyDownloaWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "C:\\Users\\Christy\\Downloads\\test spreadsheet.ss";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("C:\\Users\\Christy\\Downloads\\test spreadsheet.ss");
            #endregion
        }
        
        #region Properties
        public UICUsersChristyDownloaTitleBar UICUsersChristyDownloaTitleBar
        {
            get
            {
                if ((this.mUICUsersChristyDownloaTitleBar == null))
                {
                    this.mUICUsersChristyDownloaTitleBar = new UICUsersChristyDownloaTitleBar(this);
                }
                return this.mUICUsersChristyDownloaTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UICUsersChristyDownloaTitleBar mUICUsersChristyDownloaTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICUsersChristyDownloaTitleBar : WinTitleBar
    {
        
        public UICUsersChristyDownloaTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("C:\\Users\\Christy\\Downloads\\test spreadsheet.ss");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("C:\\Users\\Christy\\Downloads\\test spreadsheet.ss");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
}
